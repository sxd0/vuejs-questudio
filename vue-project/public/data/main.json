{
  "users": [
    {
      "id": 1,
      "username": "johndoe",
      "email": "john@example.com",
      "password": "hashed_password",
      "created_at": "2023-01-15T10:30:00Z",
      "updated_at": "2023-01-15T10:30:00Z",
      "is_admin": false,
      "avatar": "/images/avatars/user1.jpg"
    },
    {
      "id": 2,
      "username": "janedoe",
      "email": "jane@example.com",
      "password": "hashed_password",
      "created_at": "2023-01-20T14:45:00Z",
      "updated_at": "2023-01-20T14:45:00Z",
      "is_admin": false,
      "avatar": "/images/avatars/user2.jpg"
    },
    {
      "id": 3,
      "username": "admin",
      "email": "admin@example.com",
      "password": "hashed_password",
      "created_at": "2023-01-01T08:00:00Z",
      "updated_at": "2023-01-01T08:00:00Z",
      "is_admin": true,
      "avatar": "/images/avatars/admin.jpg"
    }
  ],
  "posts": [
    {
      "id": 1,
      "user_id": 1,
      "title": "Как работает хук ref в Vue 3?",
      "body": "Я начал изучать Vue 3 и Composition API. Не могу разобраться, как правильно использовать хук ref и в чем его отличие от reactive?",
      "created_at": "2023-02-10T09:15:00Z",
      "updated_at": "2023-02-10T09:15:00Z",
      "is_closed": false,
      "is_visible": true,
      "views_count": 145,
      "vote_count": 25,
      "post_type": "question",
      "parent_id": null
    },
    {
      "id": 2,
      "user_id": 2,
      "title": null,
      "body": "Хук ref используется для создания реактивной ссылки на значение любого типа. Основное отличие от reactive заключается в том, что ref работает с примитивными типами данных, а для доступа к значению нужно использовать свойство .value. Пример использования:\n\n```js\nconst count = ref(0)\nconsole.log(count.value) // 0\ncount.value++\nconsole.log(count.value) // 1\n```\n\nВ шаблонах Vue автоматически разворачивает .value, поэтому там можно писать просто {{ count }}.",
      "created_at": "2023-02-10T10:30:00Z",
      "updated_at": "2023-02-10T10:30:00Z",
      "is_closed": false,
      "is_visible": true,
      "views_count": 0,
      "vote_count": 18,
      "post_type": "answer",
      "parent_id": 1
    },
    {
      "id": 3,
      "user_id": 1,
      "title": "Какие есть способы управления состоянием во Vue?",
      "body": "Разрабатываю достаточно крупное приложение на Vue. Какие есть рекомендуемые подходы для управления состоянием? Стоит ли использовать Vuex или есть более современные решения?",
      "created_at": "2023-02-15T14:20:00Z",
      "updated_at": "2023-02-15T14:20:00Z",
      "is_closed": false,
      "is_visible": true,
      "views_count": 210,
      "vote_count": 32,
      "post_type": "question",
      "parent_id": null
    },
    {
      "id": 4,
      "user_id": 3,
      "title": null,
      "body": "Для управления состоянием во Vue есть несколько подходов:\n\n1. **Props и события** - для простых приложений\n2. **Provide/Inject** - для передачи данных глубоко в дерево компонентов\n3. **Vuex** - классическое решение для Vue 2\n4. **Pinia** - современная альтернатива Vuex для Vue 3\n\nДля крупных приложений на Vue 3 рекомендую обратить внимание на Pinia, так как она имеет лучшую поддержку TypeScript, меньше бойлерплейта и нативно работает с Composition API.",
      "created_at": "2023-02-15T15:45:00Z",
      "updated_at": "2023-02-15T15:45:00Z",
      "is_closed": false,
      "is_visible": true,
      "views_count": 0,
      "vote_count": 41,
      "post_type": "answer",
      "parent_id": 3
    },
    {
      "id": 5,
      "user_id": 2,
      "title": "Как организовать адаптивную верстку во Vue?",
      "body": "Какие есть лучшие практики для создания адаптивного дизайна в приложении Vue? Стоит ли использовать CSS-фреймворк или писать собственные стили?",
      "created_at": "2023-02-20T11:10:00Z",
      "updated_at": "2023-02-20T11:10:00Z",
      "is_closed": false,
      "is_visible": true,
      "views_count": 178,
      "vote_count": 29,
      "post_type": "question",
      "parent_id": null
    },
    {
      "id": 6,
      "user_id": 1,
      "title": null,
      "body": "Для адаптивной верстки во Vue я рекомендую следующие подходы:\n\n1. Использовать CSS Grid и Flexbox для создания гибких макетов\n2. Применять медиа-запросы (@media) для различных размеров экранов\n3. Рассмотреть использование CSS-переменных для единообразия\n\nЧто касается фреймворков, то популярные варианты:\n- Tailwind CSS - утилитарный подход\n- Vuetify - материальный дизайн\n- Bootstrap Vue - на основе Bootstrap\n\nВыбор зависит от требований проекта и ваших предпочтений.",
      "created_at": "2023-02-20T13:25:00Z",
      "updated_at": "2023-02-20T13:25:00Z",
      "is_closed": false,
      "is_visible": true,
      "views_count": 0,
      "vote_count": 15,
      "post_type": "answer",
      "parent_id": 5
    },
    {
      "id": 7,
      "user_id": 2,
      "title": null,
      "body": "Соглашусь с предыдущим ответом и добавлю, что можно также рассмотреть подход с CSS-модулями, которые хорошо работают с Vue. Это позволит вам иметь изолированные стили для каждого компонента и избежать конфликтов имен классов. Vue CLI проекты уже настроены для работы с CSS-модулями.",
      "created_at": "2023-02-21T09:40:00Z",
      "updated_at": "2023-02-21T09:40:00Z",
      "is_closed": false,
      "is_visible": true,
      "views_count": 0,
      "vote_count": 8,
      "post_type": "answer",
      "parent_id": 5
    },
    {
      "id": 8,
      "user_id": 3,
      "title": null,
      "body": "Отличный вопрос! Кроме уже упомянутых вариантов, рекомендую обратить внимание на подход Mobile First - сначала стилизовать интерфейс для мобильных устройств, а затем расширять для больших экранов с помощью медиа-запросов. Это обычно приводит к более чистому и эффективному CSS.",
      "created_at": "2023-02-22T16:15:00Z",
      "updated_at": "2023-02-22T16:15:00Z",
      "is_closed": false,
      "is_visible": true,
      "views_count": 0,
      "vote_count": 12,
      "post_type": "answer",
      "parent_id": 5
    },
    {
      "id": 9,
      "user_id": 3,
      "title": "Как эффективно использовать Composition API?",
      "body": "Недавно перешел с Options API на Composition API. Какие есть лучшие практики организации кода? Стоит ли выносить логику в composables?",
      "created_at": "2023-03-05T10:00:00Z",
      "updated_at": "2023-03-05T10:00:00Z",
      "is_closed": false,
      "is_visible": true,
      "views_count": 256,
      "vote_count": 45,
      "post_type": "question",
      "parent_id": null
    },
    {
      "id": 10,
      "user_id": 1,
      "title": null,
      "body": "Composition API действительно предлагает много преимуществ, вот несколько лучших практик:\n\n1. **Используйте composables** для повторного использования логики между компонентами\n2. **Группируйте связанный код** вместо разделения по опциям\n3. **Именуйте ref и reactive переменные** в соответствии с их назначением, без специальных префиксов\n4. **Деструктурируйте с осторожностью** - помните, что деструктуризация reactive теряет реактивность\n\nПример хорошей организации:\n```js\n// useCounter.js\nexport function useCounter() {\n  const count = ref(0)\n  function increment() {\n    count.value++\n  }\n  return { count, increment }\n}\n\n// Component.vue\nimport { useCounter } from './useCounter'\n\nsetup() {\n  const { count, increment } = useCounter()\n  return { count, increment }\n}\n```",
      "created_at": "2023-03-05T11:30:00Z",
      "updated_at": "2023-03-05T11:30:00Z",
      "is_closed": false,
      "is_visible": true,
      "views_count": 0,
      "vote_count": 38,
      "post_type": "answer",
      "parent_id": 9
    }
  ],
  "tags": [
    {
      "id": 1,
      "name": "vue.js",
      "description": "Прогрессивный JavaScript фреймворк для создания пользовательских интерфейсов"
    },
    {
      "id": 2,
      "name": "javascript",
      "description": "Мультипарадигменный язык программирования"
    },
    {
      "id": 3,
      "name": "composition-api",
      "description": "API во Vue 3, позволяющий организовывать код по логическим блокам"
    },
    {
      "id": 4,
      "name": "css",
      "description": "Каскадные таблицы стилей для оформления HTML-документов"
    },
    {
      "id": 5,
      "name": "адаптивный-дизайн",
      "description": "Методы создания веб-интерфейсов, корректно работающих на различных устройствах"
    },
    {
      "id": 6,
      "name": "state-management",
      "description": "Управление состоянием приложения"
    }
  ],
  "postsTags": [
    {
      "post_id": 1,
      "tag_id": 1
    },
    {
      "post_id": 1,
      "tag_id": 3
    },
    {
      "post_id": 3,
      "tag_id": 1
    },
    {
      "post_id": 3,
      "tag_id": 6
    },
    {
      "post_id": 5,
      "tag_id": 1
    },
    {
      "post_id": 5,
      "tag_id": 4
    },
    {
      "post_id": 5,
      "tag_id": 5
    },
    {
      "post_id": 9,
      "tag_id": 1
    },
    {
      "post_id": 9,
      "tag_id": 2
    },
    {
      "post_id": 9,
      "tag_id": 3
    }
  ],
  "votes": [
    {
      "id": 1,
      "user_id": 1,
      "post_id": 3,
      "vote_type": 1
    },
    {
      "id": 2,
      "user_id": 1,
      "post_id": 4,
      "vote_type": 1
    },
    {
      "id": 3,
      "user_id": 2,
      "post_id": 1,
      "vote_type": 1
    },
    {
      "id": 4,
      "user_id": 2,
      "post_id": 10,
      "vote_type": 1
    },
    {
      "id": 5,
      "user_id": 3,
      "post_id": 1,
      "vote_type": 1
    },
    {
      "id": 6,
      "user_id": 3,
      "post_id": 2,
      "vote_type": 1
    }
  ],
  "currentUser": {
    "id": 1,
    "username": "johndoe",
    "email": "john@example.com",
    "avatar": "/images/avatars/user1.jpg",
    "isLoggedIn": true,
    "isAdmin": false
  }
}